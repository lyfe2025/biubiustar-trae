---
alwaysApply: false
---
# 项目管理最佳实践专用规则

> **使用时机**：项目管理、团队协作、环境配置相关任务
> **引用自**：从 `common-rules.mdc` 分离的专用项目管理实践规则

---

## 🎯 项目管理核心理念

### 📋 管理准则
- **环境一致性**：开发、测试、生产环境的标准化配置
- **监控与维护**：全面的性能监控和定期维护机制
- **团队协作**：高效的代码协作和知识管理体系
- **持续改进**：基于实践经验的规则进化和最佳实践更新

---

## 1. 环境一致性管理

### 1.1. 项目结构统一
- **标准化遵循**：严格遵循项目结构标准化规范
  ```
  project/
  ├── logs/           # 日志文件统一管理
  ├── scripts/        # 脚本分类存放
  ├── backups/        # 备份文件管理
  ├── docs/           # 文档分类体系
  └── .cursor/        # 规则文件配置
  ```

- **配置标准化**：确保开发、测试、生产环境配置的一致性
  - 环境变量标准化
  - 配置文件版本控制
  - 依赖版本锁定机制

### 1.2. 版本和数据管理
- **版本锁定**：使用锁文件确保依赖版本一致
  - package-lock.json / yarn.lock
  - requirements.txt / Pipfile.lock
  - composer.lock / Gemfile.lock

- **数据隔离**：测试环境数据与生产环境严格隔离
  - 独立的数据库实例
  - 脱敏的测试数据
  - 严格的权限控制

---

## 2. 监控与维护体系

### 2.1. 性能监控
- **性能基准建立**：
  - 关键业务指标监控
  - 响应时间基准设定
  - 资源使用阈值监控
  - 错误率跟踪机制

- **监控工具集成**：
  - 应用性能监控（APM）
  - 日志聚合分析
  - 实时告警系统
  - 可视化监控面板

### 2.2. 日志管理规范
- **结构化日志**：使用统一的日志格式和级别
  ```json
  {
    "timestamp": "2024-01-01T00:00:00Z",
    "level": "INFO|WARN|ERROR",
    "service": "service-name",
    "message": "log content",
    "context": { "user_id": "123", "request_id": "abc" }
  }
  ```

- **日志存放规范**：按照项目目录规范存放和管理
  - logs/application/ - 应用日志
  - logs/access/ - 访问日志
  - logs/error/ - 错误日志
  - logs/audit/ - 审计日志

### 2.3. 定期维护机制
- **脚本管理**：按照项目目录规范进行脚本管理
  - scripts/maintenance/ - 维护脚本
  - scripts/backup/ - 备份脚本
  - scripts/deployment/ - 部署脚本

- **文档维护**：确保文档的时效性和准确性
  - 定期更新技术文档
  - 维护变更记录
  - 更新部署和运维手册

---

## 3. 团队协作最佳实践

### 3.1. 代码协作规范
- **提交规范**：
  - **原子性提交**：每次提交只包含一个逻辑变更
  - **清晰提交信息**：使用约定式提交格式
    ```
    type(scope): description
    
    feat(auth): add user login validation
    fix(api): resolve payment processing error
    docs(readme): update installation instructions
    ```

- **分支策略**：
  - **Git Flow**：feature → develop → release → master
  - **保护分支**：master/main 分支保护，要求代码审查
  - **分支命名**：feature/description, bugfix/issue-number

### 3.2. 代码审查流程
- **审查要求**：
  - 所有代码必须经过同行审查
  - 关注代码质量、安全性、性能
  - 确保遵循项目编码规范

- **审查工具**：
  - Pull Request / Merge Request
  - 代码质量检查工具集成
  - 自动化测试通过检查

### 3.3. 知识管理体系
- **文档分类规范**：按照第2.4节的文档分类规范进行知识分享和传承
  ```
  docs/
  ├── 架构文档/        # 系统架构和设计
  ├── 开发指南/        # 开发流程和规范
  ├── 部署运维/        # 部署和运维手册
  ├── API文档/         # 接口文档
  ├── 用户手册/        # 用户使用指南
  ├── 项目管理/        # 项目管理文档
  ├── 问题解决/        # 问题解决方案
  └── 团队协作/        # 团队协作规范
  ```

- **知识传承机制**：
  - 技术分享会
  - 代码 walkthrough
  - 项目文档维护
  - 最佳实践总结

### 3.4. 问题反馈与改进
- **快速反馈机制**：
  - 建立问题反馈渠道
  - 定期团队回顾会议
  - 及时调整开发策略

- **持续改进**：
  - 收集团队反馈
  - 分析问题模式
  - 优化协作流程
  - 更新最佳实践

---

## 4. 核心价值观与质量保证

### 4.1. 核心价值观
- **规则遵循优于开发便利**：严格遵循500行文件限制等核心规则，不得以开发便利为由违反
- **质量优于速度**：始终将代码质量和系统稳定性放在首位
- **安全优于便利**：在便利性和安全性之间，始终选择安全
- **团队协作优于个人效率**：代码要便于团队理解和维护

### 4.2. 质量保证机制
- **多层质量检查**：
  - 代码静态分析
  - 自动化测试覆盖
  - 同行代码审查
  - 集成测试验证

- **持续改进循环**：
  - 定期质量评估
  - 问题根因分析
  - 流程优化调整
  - 最佳实践更新

---

## 5. 持续改进机制

### 5.1. 规则进化
- **实践驱动优化**：根据实践经验持续优化规则文件
- **反馈收集**：主动收集团队使用反馈
- **版本管理**：维护规则文件的版本历史
- **影响评估**：评估规则变更的影响范围

### 5.2. 最佳实践更新
- **技术跟踪**：跟随技术发展更新最佳实践
- **行业标准**：关注行业标准和规范变化
- **工具升级**：适应新工具和平台的最佳实践
- **经验总结**：将项目经验沉淀为可复用的实践

### 5.3. 团队成长
- **技能发展**：支持团队成员技能提升
- **知识共享**：促进团队内部知识共享
- **最佳实践推广**：在团队中推广验证过的最佳实践
- **创新鼓励**：鼓励在规范框架内的创新尝试

---

## 6. 实施指南

### 6.1. 项目启动阶段
1. **环境配置**：按照标准配置开发、测试、生产环境
2. **团队培训**：确保团队了解项目管理规范
3. **工具配置**：设置代码质量检查和监控工具
4. **流程建立**：建立代码审查和部署流程

### 6.2. 开发过程管理
1. **日常协作**：遵循代码协作和提交规范
2. **质量监控**：持续监控代码质量和性能指标
3. **问题处理**：及时处理发现的问题和风险
4. **文档维护**：保持文档的及时更新

### 6.3. 项目维护阶段
1. **定期评估**：定期评估项目管理效果
2. **流程优化**：根据反馈优化管理流程
3. **知识传承**：确保项目知识的有效传承
4. **持续改进**：基于经验持续改进管理实践

**注意**：本规则文件与 `common-rules.mdc` 配合使用，专注于项目管理最佳实践的具体实施。