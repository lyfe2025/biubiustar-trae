---
alwaysApply: false
---
# 项目初始化专用规则文件

> **使用时机**：仅在首次协作或项目初始化时执行，完成后不再重复调用
> **触发条件**：新项目、首次协作、技术栈发生重大变化

---

## 🚀 项目初始化核心流程

### 1. 技术栈智能识别与适配

#### 1.1. 自动技术栈识别
- **文件扫描机制**：自动扫描项目根目录和子目录中的关键文件
  - **前端识别**：package.json, bower.json, yarn.lock, pnpm-lock.yaml
  - **后端识别**：pom.xml, build.gradle, requirements.txt, composer.json, go.mod
  - **移动端识别**：android/, ios/, pubspec.yaml, Podfile
  - **其他工具**：Dockerfile, docker-compose.yml, .env文件

#### 1.2. 精确版本号获取
- **版本解析优先级**：
  1. 锁文件中的精确版本（package-lock.json, yarn.lock等）
  2. 配置文件中的版本范围（package.json, requirements.txt等）
  3. 全局安装版本查询（npm list -g, pip list等）
  4. 官方文档最新稳定版本

#### 1.3. 技术栈规则文件生成
- **技术栈规则文件生成**：基于识别的技术栈和版本，搜索官方文档并生成专用规则文件
  - **命名规范**：`<技术栈>-v<版本>-<类型>.mdc`
  - **生成示例**：
    - `react-v18-standards.mdc` - React 18 开发规范
    - `nodejs-v20-guidelines.mdc` - Node.js 20 最佳实践
    - `nextjs-v14-best-practices.mdc` - Next.js 14 项目规范
    - `security-web-requirements.mdc` - Web 安全要求
- **技术栈优先**：项目启动时优先生成技术栈规则文件
- **官方文档整合**：搜索并整合对应技术栈的官方最佳实践
- **框架特定规范**：根据识别的技术栈自动应用对应的技术栈专用规则文件

### 2. 项目目录结构标准化

#### 2.1. 强制目录创建机制
- **标准目录检查**：首次协作时必须检查并确保标准目录结构的存在
- **自动创建逻辑**：
  ```
  your-project/
  ├── logs/           # 项目日志统一存放
  ├── scripts/        # 项目脚本分类存放
  │   ├── deployment/ # 部署脚本
  │   ├── tools/      # 工具脚本
  │   └── database/   # 数据库脚本
  ├── scripts.sh      # 交互式脚本入口
  ├── backups/        # 项目备份统一存放
  └── docs/           # 项目文档分类存放
      ├── 架构文档/
      ├── 开发指南/
      ├── 部署运维/
      ├── API文档/
      ├── 用户手册/
      ├── 项目管理/
      ├── 问题解决/
      └── 团队协作/
  ```

#### 2.2. 目录README文件生成
- **自动生成README**：如果标准目录不存在，应自动创建并添加相应的README文件
- **结构完整性**：即使暂时为空也要保持目录结构的完整性
- **使用说明**：每个目录包含用途说明和使用规范

### 3. 项目理解与上下文建立

#### 3.1. 项目快速理解
- **项目结构分析**：自动分析项目的整体架构和组织方式
- **业务逻辑识别**：通过代码结构和命名识别主要业务领域
- **开发模式适应**：学习项目现有的代码风格、业务逻辑和架构模式
- **团队习惯识别**：适应团队开发习惯和约定

#### 3.2. 关键信息记录
- **项目特有约定**：识别并记录项目特有的约定和规范
- **架构决策**：记录重要的架构决策和技术选择
- **依赖关系**：分析并记录主要的依赖关系和集成点
- **配置管理**：识别配置文件和环境变量的管理方式

### 4. 环境一致性检查

#### 4.1. 跨环境结构检查
- **环境对比**：确保开发、测试、生产环境的项目结构完全一致
- **配置一致性**：项目结构相关的配置要在所有环境中保持一致
- **验证机制**：建立项目目录结构完整性的定期验证机制

#### 4.2. 权限和安全设置
- **目录权限**：
  - logs/ 目录需要适当的读写权限
  - scripts/ 目录中的脚本需要执行权限
  - backups/ 目录需要严格的访问控制
  - docs/ 目录根据项目需要设置访问权限
- **路径引用规范**：
  - 代码中引用这些目录时使用相对路径
  - 配置文件中使用环境变量或配置项指定路径
  - 避免硬编码绝对路径，确保跨环境兼容性

### 5. 初始化完成标记

#### 5.1. 完成状态记录
- **初始化标记文件**：创建 `.cursor/project-initialized` 标记文件
- **记录初始化信息**：
  ```json
  {
    "initialized_at": "2024-01-01T00:00:00Z",
    "tech_stack": ["react", "nodejs", "typescript"],
    "versions": {
      "react": "18.2.0",
      "nodejs": "20.10.0",
      "typescript": "5.3.0"
    },
    "generated_rules": [
      "react-v18-standards.mdc",
      "nodejs-v20-guidelines.mdc",
      "typescript-v5-best-practices.mdc"
    ],
    "directories_created": ["logs", "scripts", "backups", "docs"],
    "last_check": "2024-01-01T00:00:00Z"
  }
  ```

#### 5.2. 后续维护机制
- **版本变更检测**：当技术栈版本发生重大变化时，重新执行初始化
- **结构验证**：定期验证项目目录结构的完整性和规范性
- **规则文件更新**：根据技术栈升级自动更新相关规则文件

---

## 📋 初始化检查清单

### ✅ 必须完成的初始化步骤

1. **技术栈识别**
   - [ ] 扫描项目文件，识别所有技术栈
   - [ ] 获取精确的版本号信息
   - [ ] 记录技术栈配置到初始化文件

2. **规则文件生成**
   - [ ] 为每个主要技术栈生成专用规则文件
   - [ ] 下载并整合官方最佳实践
   - [ ] 验证规则文件的有效性

3. **目录结构创建**
   - [ ] 创建所有标准目录
   - [ ] 生成每个目录的README文件
   - [ ] 设置适当的目录权限

4. **项目理解建立**
   - [ ] 分析项目架构和业务逻辑
   - [ ] 记录项目特有约定
   - [ ] 适应团队开发习惯

5. **初始化标记**
   - [ ] 创建初始化完成标记文件
   - [ ] 记录详细的初始化信息
   - [ ] 建立后续维护机制

### 🔄 触发重新初始化的条件

- **技术栈重大变更**：主要技术栈版本发生大版本升级
- **项目结构变更**：项目架构发生重大调整
- **强制重新初始化**：用户明确要求重新初始化
- **初始化文件损坏**：初始化标记文件不存在或损坏

---

## ⚠️ 重要说明

1. **一次性执行**：本规则文件仅在项目初始化时执行一次
2. **状态检查**：执行前先检查 `.cursor/project-initialized` 文件是否存在
3. **幂等性保证**：重复执行不会产生副作用，但会更新相关配置
4. **错误恢复**：初始化过程中遇到错误，记录错误信息并支持部分重试
5. **性能优化**：初始化完成后，主规则文件将不再调用这些一次性规则

**注意**：初始化完成后，请重启 Cursor IDE 以确保所有生成的规则文件生效！