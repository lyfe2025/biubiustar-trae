---
alwaysApply: false
---
# 规则文件管理专用指南

 > 本文件是从 `common-rules.mdc` 分离出来的专用规则文件，专门处理规则文件的生成、修改和管理策略。

## 🚀 v2.0 管理策略升级

### ✨ 新增特性
- **智能生命周期管理**：自动维护、版本管理、质量保证
- **多层分类体系**：一次性、技术栈、问题解决、运行时规则的完整分类
- **质量保证机制**：语法验证、内容完整性、实用性评估
- **渐进式更新**：智能检测变更，提供选择性更新机制

### 📋 规则文件分类与生命周期

#### 规则文件完整分类
- **一次性规则**：`project-initialization.mdc` - 仅在项目初始化时执行，完成后不再调用
- **技术栈规则**：`<技术栈>-v<版本>-<类型>.mdc` - 动态生成，版本敏感，需要持续维护
- **问题解决规则**：`<问题类型>-solutions.mdc` - 基于重复问题生成，持续累积优化
- **通用运行时规则**：`common-rules.mdc` - 每次协作都应用，核心稳定规则

#### 智能生命周期管理

| 触发场景 | 生成时机 | 规则类型 | 自动化程度 | 优先级 |
|----------|----------|----------|------------|--------|
| **项目初始化** | 首次协作检测技术栈 | 技术栈规则文件 | 全自动批量生成 | 最高 |
| **技术栈变更** | package.json等关键文件修改 | 增量更新规则 | 半自动提示生成 | 高 |
| **重复问题** | 同一问题出现≥2次 | 问题解决规则 | 自动触发生成 | 高 |
| **新技术引入** | 检测到新依赖或框架 | 专用技术规则 | 半自动提示生成 | 中 |
| **手动触发** | 用户明确请求 | 任意类型规则 | 手动按需生成 | 按需 |

#### 版本管理策略
- **语义化版本**：技术栈规则文件严格对应技术栈版本
- **向后兼容**：新版本规则支持旧版本项目的基本功能
- **清理机制**：定期清理过期和无效的规则文件
- **回滚支持**：保留规则文件历史，支持版本回退

#### 质量保证机制

| 验证类型 | 检查内容 | 验证方式 | 失败处理 | 频率 |
|----------|----------|----------|----------|------|
| **语法验证** | Markdown格式正确性 | 自动解析和语法检查 | 自动修复或提示用户 | 每次修改 |
| **内容完整性** | 必要规则和实践包含 | 模板对照和内容扫描 | 补充缺失内容 | 生成时 |
| **实用性评估** | 规则使用频率和效果 | 使用统计和效果跟踪 | 优化或废弃低效规则 | 定期 |
| **冲突检测** | 规则间逻辑冲突识别 | 交叉引用和逻辑分析 | 自动协调或人工解决 | 修改时 |
| **用户反馈** | 使用体验和改进建议 | 反馈收集和分析机制 | 迭代优化规则内容 | 持续 |

---

## 📊 智能规则文件管理策略

### **1. 专用规则文件生成触发条件**

#### **立即生成场景**：
- **技术栈识别**：项目启动时自动生成技术栈专用规则文件（最高优先级）
- **重复问题**：同一问题出现2次以上，必须立即生成专用规则文件
- **新技术引入**：引入新框架、库或工具时，生成对应技术规则文件
- **严重错误**：出现影响项目稳定性的错误时，生成预防规则文件

#### **计划生成场景**：
- **项目阶段变化**：从开发转入测试、部署阶段时生成对应规则
- **团队扩大**：新成员加入时生成团队协作规则文件
- **性能问题**：性能指标下降时生成性能优化规则文件

### **2. 规则文件修改触发机制**

#### **强制修改条件**：
- **规则失效**：现有规则无法解决当前问题时
- **技术升级**：技术栈版本升级导致规则过时时
- **错误修正**：发现规则文件中的错误或不准确信息时
- **安全漏洞**：发现安全相关的规则缺失或错误时

#### **优化修改条件**：
- **效率提升**：发现更好的解决方案时
- **流程改进**：工作流程优化后需要更新规则时
- **经验积累**：项目经验积累后的规则完善

### **3. 问题驱动的规则生成机制**

#### **问题分类追踪**：
```
重复问题识别 → 问题分类归档 → 规则文件生成 → 预防机制建立
     ↓              ↓              ↓              ↓
问题出现记录 → 问题类型标记 → 解决方案文档化 → 自动检查集成
```

#### **规则文件类型映射**：
- **技术问题** → `tech-<问题类型>-solutions.mdc`
- **流程问题** → `workflow-<场景>-guidelines.mdc`
- **代码质量** → `code-quality-<领域>-standards.mdc`
- **安全相关** → `security-<类型>-requirements.mdc`

### **4. 新项目适配策略**

#### **规则文件继承原则**：
- **通用规则**：直接继承，适用于所有项目类型
- **技术栈规则**：根据新项目技术栈选择性继承
- **项目特定规则**：重新生成，不继承历史项目的特定规则
- **问题预防规则**：选择性继承，评估适用性后决定

#### **自动化生成流程**：
1. **项目初始化时**：自动识别技术栈并生成基础规则文件
2. **开发过程中**：监控问题出现频率，达到阈值自动提醒生成规则
3. **里程碑节点**：项目重要节点自动评估是否需要新增规则文件

---

## 🔧 专用规则文件智能管理

### **1. 创建时机智能判断**

#### **强制创建场景**（立即执行）：
- **项目启动**：技术栈规则文件（最高优先级，必须首个生成）
- **重复问题**：同一问题出现2次，立即生成预防规则文件
- **严重错误**：影响系统稳定性的问题，立即生成安全规则文件
- **新技术栈**：引入新框架/库时，立即生成对应技术规则文件

#### **计划创建场景**（评估后执行）：
- **项目阶段变化**：开发→测试→部署阶段切换时
- **团队规模变化**：新成员加入或团队重组时
- **性能下降**：关键指标低于基准时
- **用户反馈**：频繁的用户体验问题时

### **2. 修改触发条件**

#### **立即修改条件**：
- **规则失效**：现有规则无法解决当前问题
- **技术升级**：依赖版本升级导致规则过时
- **安全漏洞**：发现安全相关的规则缺陷
- **错误修正**：规则文件中的错误信息

#### **定期更新条件**：
- **经验优化**：积累更好的解决方案
- **流程改进**：工作流程优化后的规则更新
- **标准变更**：行业标准或最佳实践变更

### **3. 命名规范和分类**

#### **技术栈规则**：
- 格式：`<技术栈>-v<版本>-<类型>.mdc`
- 示例：`react-v18-standards.mdc`、`nodejs-v20-guidelines.mdc`
- 生成时机：项目初始化，技术栈变更

#### **问题解决规则**：
- 格式：`<问题类型>-<解决方案>-guide.mdc`
- 示例：`database-connection-troubleshooting.mdc`、`build-optimization-strategies.mdc`
- 生成时机：重复问题出现，解决方案成熟

#### **功能域规则**：
- 格式：`<功能域>-<具体领域>-standards.mdc`
- 示例：`frontend-component-design.mdc`、`backend-api-security.mdc`
- 生成时机：功能模块复杂化，需要专门规范

#### **安全合规规则**：
- 格式：`security-<类型>-requirements.mdc`
- 示例：`security-data-protection.mdc`、`security-access-control.mdc`
- 生成时机：安全事件发生，合规要求变更

### **4. 优先级和继承策略**

#### **规则优先级**（从高到低）：
1. **技术栈规则文件**：项目技术基础，最高优先级
2. **安全合规规则**：安全要求，次高优先级
3. **问题解决规则**：解决具体问题，中等优先级
4. **功能域规则**：功能开发规范，较低优先级
5. **通用规则**：基础协作准则，兜底优先级

#### **新项目继承策略**：
- **必须继承**：通用规则、成熟的技术栈规则
- **选择继承**：问题解决规则（评估相关性）
- **重新生成**：项目特定规则、过时的技术规则
- **禁止继承**：历史项目的临时规则、已废弃技术的规则

---

## 📋 使用指南

### **何时引用本规则文件**：
- 需要生成新的专用规则文件时
- 现有规则文件需要修改时
- 新项目初始化，确定规则文件策略时
- 遇到重复问题，需要建立预防机制时

### **在主规则文件中的引用方式**：
在 `common-rules.mdc` 中通过简洁的引用方式调用本文件的详细策略，保持主文件的简洁性。