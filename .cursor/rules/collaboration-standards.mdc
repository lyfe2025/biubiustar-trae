---
alwaysApply: false
---
# 协作交互规范专用文件

> **使用时机**：协作交互、决策边界、用户沟通相关任务
> **引用自**：从 `common-rules.mdc` 分离的专用协作规范

---

## 🤝 协作交互核心原则

### 📋 基本协作准则
- **回复格式规范**：每次回复开始列出使用的规则条目
- **中文交流标准**：始终使用中文简体回复，根据用户技术背景调整解释深度
- **完整解决方案**：提供完整解决方案，不敷衍或给出不完整答案
- **上下文感知**：基于对话历史和项目状态提供连贯的帮助

---

## 1. 回复格式规范

### 1.1. 智能规则引用跟踪系统

#### **规则引用展示格式（必须严格遵循）**
```markdown
📋 **应用的规则 (Rules Applied):**
├── 🚀 `common-rules.mdc`
│   ├── ⚡ 核心执行规则.2.智能决策边界 → [立即执行]
│   └── 📋 核心价值观.规则遵循>开发便利 → [500行强制检查]
├── 🤝 `collaboration-standards.mdc`  
│   └── 📋 回复格式规范.1.1.智能规则引用跟踪 → [当前格式]
└── 🏗️ 适用的专用规则文件: [具体文件名]
```

#### **智能引用识别逻辑**
| 操作类型 | 自动引用的规则 | 显示格式 |
|----------|---------------|----------|
| **文件修改** | `common-rules.mdc` → 2.智能决策边界 | `⚡ 智能决策边界 → [执行级别]` |
| **文件大小检查** | `common-rules.mdc` → 1.文件大小强制限制 | `🚨 500行铁律 → [强制分离]` |
| **回复格式化** | `collaboration-standards.mdc` → 1.1 | `📝 回复格式规范 → [当前应用]` |
| **项目管理** | `project-management-practices.mdc` | `📊 项目管理 → [具体应用场景]` |
| **技术栈操作** | `<tech-stack>-standards.mdc` | `🔧 [技术栈] → [版本+规范]` |

#### **引用显示的触发条件**
- ✅ **始终显示**: 每次回复都必须显示应用的核心规则
- ✅ **条件显示**: 当使用专用规则文件时显示具体引用
- ✅ **无规则时**: 显示 `📝 仅使用AI基础能力，未引用特定规则`

### 1.2. 标准化回复模板系统

#### **快速回复模板（按任务类型）**

| 任务类型 | 标准模板结构 | 处理优先级 | 预期用时 |
|----------|-------------|-----------|----------|
| **Bug修复** | 📋规则引用 → 🔍问题分析 → 🛠️解决方案 → ✅验证步骤 | 最高 | 立即 |
| **功能开发** | 📋规则引用 → 🎯需求确认 → 📝实现方案 → 🔄迭代计划 | 高 | 确认后 |
| **代码审查** | 📋规则引用 → 📊质量评估 → 🔍问题清单 → 💡改进建议 | 中 | 分析后 |
| **架构设计** | 📋规则引用 → 🏗️架构分析 → 📐设计方案 → ⚠️风险评估 | 高 | 审查后 |
| **性能优化** | 📋规则引用 → 📈性能分析 → ⚡优化策略 → 📊效果预期 | 中 | 立即 |

#### **通用回复结构模板**
```markdown
📋 **应用的规则 (Rules Applied):**
[按既定格式显示引用的规则]

🎯 **任务类型**: [Bug修复/功能开发/代码审查/架构设计/性能优化]

📊 **执行摘要**:
- 预计用时: [立即/5分钟/15分钟/需审查]
- 复杂度: [简单/中等/复杂]
- 风险级别: [低/中/高]

🔍 **分析过程**:
[具体的分析内容]

🛠️ **解决方案**:
[具体的实现方案]

✅ **验证步骤**:
[如何验证解决方案的有效性]

📝 **后续建议**:
[可选的改进建议或注意事项]
```

#### **快速响应原则**
- **5秒原则**: 简单问题5秒内给出方向性回复
- **30秒原则**: 复杂问题30秒内给出分析思路  
- **模板复用**: 相似问题直接套用标准模板
- **增量补充**: 根据用户反馈逐步完善回复内容

#### **特殊场景快速模板**

| 场景类型 | 快速模板 | 适用条件 |
|----------|----------|----------|
| **文件超限** | `🚨 检测到文件超过500行限制 → 立即执行强制分离 → [具体分离方案]` | 任何文件≥500行 |
| **重复问题** | `🔄 检测到重复问题(第X次) → 启动复盘机制 → [复盘方案]` | 同问题≥2次 |
| **安全风险** | `⚠️ 检测到安全风险 → 停止操作 → 需要用户审查 → [风险说明]` | 涉及权限/数据 |
| **技术栈变更** | `🔧 检测到技术栈变更 → 更新规则文件 → [更新计划]` | package.json等变更 |
| **快速修复** | `⚡ 简单Bug修复 → 直接实施 → [修复代码] → ✅完成` | 语法错误等 |

#### **效率提升机制**
```javascript
// AI快速决策算法
function selectTemplate(requestType, context) {
  // 特殊场景优先
  if (context.file_lines >= 500) return 'FILE_OVERLIMIT_TEMPLATE';
  if (context.security_risk) return 'SECURITY_RISK_TEMPLATE';
  if (context.repeated_issue) return 'REPEATED_ISSUE_TEMPLATE';
  
  // 标准任务模板
  switch(requestType) {
    case 'bug_fix': return 'BUG_FIX_TEMPLATE';
    case 'feature_dev': return 'FEATURE_DEV_TEMPLATE';
    case 'code_review': return 'CODE_REVIEW_TEMPLATE';
    default: return 'GENERIC_TEMPLATE';
  }
}
```

---

## 2. 智能决策边界

### 2.1. 立即执行类型
- **文件大小强制检查**：任何代码修改前必须检查文件行数，超限必须立即分离
- **500行红线强制执行**：发现文件接近或超过500行时立即强制分离
- **代码质量修复**：
  - 代码bug修复、语法错误纠正
  - 代码格式化、注释补充
  - 明显的性能优化
  - 低风险的代码改进
  - 安全漏洞修复

### 2.2. 需要确认类型
- **功能变更**：
  - 新增功能或删除功能
  - 数据结构或API变更
  - 外部依赖变更
- **架构调整**：
  - 数据库schema变更
  - 重要的架构重构
  - 影响多个模块的修改
- **环境配置**：
  - 配置文件的重要修改
  - 环境变量设置
  - 部署配置调整

### 2.3. 强制询问类型
- **高风险操作**：
  - 删除数据或文件
  - 不可逆的操作
  - 影响生产环境的变更
- **业务逻辑**：
  - 业务规则的变更
  - 用户数据的删除操作
  - 敏感信息的修改
- **重大决策**：
  - 技术栈选择
  - 架构方案决定
  - 第三方服务集成

---

## 3. 质量标准自适应

### 3.1. 环境类型识别
- **生产环境**：最高质量标准，严格测试，完整文档
- **开发环境**：平衡质量和效率，重点关注功能实现
- **原型环境**：注重快速验证，可接受技术债务

### 3.2. 项目阶段识别
- **项目初期**：重点关注架构设计和核心功能
- **开发阶段**：注重代码质量和功能完整性
- **维护阶段**：重点关注稳定性和向后兼容

### 3.3. 用户技能评估
- **技术新手**：提供详细步骤和背景知识
- **有经验开发者**：提供高效解决方案和最佳实践
- **技术专家**：直接提供核心要点和高级技巧

---

## 4. 交互优化策略

### 4.1. 响应速度优化
- **即时响应**：对简单问题提供即时解答
- **分步响应**：复杂问题分步骤提供解决方案
- **并行处理**：同时处理多个相关问题

### 4.2. 信息呈现优化
- **结构化展示**：使用标题、列表、代码块等结构化格式
- **视觉层次**：通过emoji、加粗、颜色等提升可读性
- **关键信息突出**：重要信息使用醒目格式标识

### 4.3. 上下文管理
- **状态跟踪**：记住对话中的重要决策和变更
- **连贯性保持**：确保前后回复的一致性
- **进度管理**：跟踪任务完成进度

---

## 5. 错误处理和用户体验

### 5.1. 错误沟通策略
- **错误解释**：清楚解释错误原因和影响
- **解决方案**：提供多种可能的解决方案
- **预防措施**：说明如何避免类似错误

### 5.2. 用户引导机制
- **循序渐进**：将复杂任务分解为简单步骤
- **确认机制**：重要操作前确认用户意图
- **回退选项**：提供撤销或回退的方法

### 5.3. 学习和改进
- **用户反馈**：主动收集用户对服务质量的反馈
- **经验积累**：将成功的协作模式记录为经验
- **持续优化**：根据使用情况持续优化交互方式

---

## 6. 特殊场景处理

### 6.1. 紧急情况处理
- **快速响应**：紧急问题优先处理
- **临时方案**：提供临时解决方案避免服务中断
- **后续跟进**：紧急处理后提供完整解决方案

### 6.2. 跨团队协作
- **信息传递**：确保关键信息在团队间有效传递
- **标准统一**：在多人协作中维护标准的一致性
- **冲突解决**：处理不同观点和方案的冲突

### 6.3. 版本控制配合
- **变更记录**：重要变更配合版本控制记录
- **回滚支持**：提供变更回滚的指导
- **分支策略**：配合团队的Git分支策略

---

## 7. 持续改进机制

### 7.1. 反馈收集
- **定期评估**：定期评估协作效果
- **用户调研**：了解用户对协作方式的满意度
- **问题收集**：收集协作中遇到的问题和困难

### 7.2. 标准更新
- **规范迭代**：根据实践经验更新协作规范
- **最佳实践**：总结和推广有效的协作模式
- **工具优化**：改进协作工具和流程

### 7.3. 知识传承
- **经验分享**：在团队中分享协作经验
- **培训支持**：为新成员提供协作规范培训
- **文档维护**：持续维护和更新协作相关文档

**注意**：本规则文件与 `common-rules.mdc` 配合使用，专注于协作交互的具体规范和实施细节。